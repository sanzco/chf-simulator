/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.oracle.cgbu.simulator.chf.api;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.context.request.NativeWebRequest;

import com.oracle.cgbu.simulator.api.ApiUtil;
import com.oracle.cgbu.simulator.chf.api.model.ProblemDetails;
import com.oracle.cgbu.simulator.chf.api.model.SpendingLimitContext;
import com.oracle.cgbu.simulator.chf.api.model.SpendingLimitStatus;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-02T15:17:00.823608400-05:00[America/Bogota]")
@Validated
@Api(value = "subscriptions", description = "the subscriptions API")
public interface SubscriptionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /subscriptions
     *
     * @param spendingLimitContext  (required)
     * @return Success (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "", nickname = "subscriptionsPost", notes = "", response = SpendingLimitStatus.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nchf-spendinglimitcontrol", description = "Access to the Nchf_SpendingLimitControl API") })
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = SpendingLimitStatus.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/subscriptions",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SpendingLimitStatus> _subscriptionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SpendingLimitContext spendingLimitContext) {
        return subscriptionsPost(spendingLimitContext);
    }

    // Override this method
    default  ResponseEntity<SpendingLimitStatus> subscriptionsPost(SpendingLimitContext spendingLimitContext) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"supportedFeatures\" : \"supportedFeatures\", \"statusInfos\" : { \"key\" : { \"penPolCounterStatuses\" : [ { \"policyCounterStatus\" : \"policyCounterStatus\" }, { \"policyCounterStatus\" : \"policyCounterStatus\" } ], \"policyCounterId\" : \"policyCounterId\", \"currentStatus\" : \"currentStatus\" } }, \"supi\" : \"supi\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /subscriptions/{subscriptionId}
     *
     * @param subscriptionId Identifies an individual spending limit retrieval subscription. (required)
     * @return No Content. Resource was succesfully deleted (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "", nickname = "subscriptionsSubscriptionIdDelete", notes = "", authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nchf-spendinglimitcontrol", description = "Access to the Nchf_SpendingLimitControl API") })
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content. Resource was succesfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @DeleteMapping(
        value = "/subscriptions/{subscriptionId}",
        produces = { "application/problem+json" }
    )
    default ResponseEntity<Void> _subscriptionsSubscriptionIdDelete(@ApiParam(value = "Identifies an individual spending limit retrieval subscription.",required=true) @PathVariable("subscriptionId") String subscriptionId) {
        return subscriptionsSubscriptionIdDelete(subscriptionId);
    }

    // Override this method
    default  ResponseEntity<Void> subscriptionsSubscriptionIdDelete(String subscriptionId) {
    	
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /subscriptions/{subscriptionId}
     *
     * @param subscriptionId Identifies an individual spending limit retrieval subscription. (required)
     * @param spendingLimitContext  (required)
     * @return OK. Resource was succesfully modified and representation is returned (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "", nickname = "subscriptionsSubscriptionIdPut", notes = "", response = SpendingLimitStatus.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nchf-spendinglimitcontrol", description = "Access to the Nchf_SpendingLimitControl API") })
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. Resource was succesfully modified and representation is returned", response = SpendingLimitStatus.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PutMapping(
        value = "/subscriptions/{subscriptionId}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SpendingLimitStatus> _subscriptionsSubscriptionIdPut(@ApiParam(value = "Identifies an individual spending limit retrieval subscription.",required=true) @PathVariable("subscriptionId") String subscriptionId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody SpendingLimitContext spendingLimitContext) {
        return subscriptionsSubscriptionIdPut(subscriptionId, spendingLimitContext);
    }

    // Override this method
    default  ResponseEntity<SpendingLimitStatus> subscriptionsSubscriptionIdPut(String subscriptionId, SpendingLimitContext spendingLimitContext) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"supportedFeatures\" : \"supportedFeatures\", \"statusInfos\" : { \"key\" : { \"penPolCounterStatuses\" : [ { \"policyCounterStatus\" : \"policyCounterStatus\" }, { \"policyCounterStatus\" : \"policyCounterStatus\" } ], \"policyCounterId\" : \"policyCounterId\", \"currentStatus\" : \"currentStatus\" } }, \"supi\" : \"supi\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
